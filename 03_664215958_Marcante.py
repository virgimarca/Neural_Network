# -*- coding: utf-8 -*-
"""03_664215958_Marcante.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NEZlXPqQy5oHOIuNrmP8SVbqIzhpqMGM
"""

import numpy as np
import matplotlib.pyplot as plt
import gzip, struct
import time

def read_idx(filename):
  with gzip.open(filename, 'rb') as f:
    zero, data_type, dims = struct.unpack('>HBB', f.read(4))
    shape = tuple(struct.unpack('>I', f.read(4))[0] for d in range(dims))
    return np.frombuffer(f.read(), dtype=np.uint8).reshape(shape)

if __name__ == '__main__':
  X = read_idx("train-images-idx3-ubyte.gz")
  Y = read_idx("train-labels-idx1-ubyte.gz")
  assert X.shape == (60000, 28, 28) # check if all data is loaded
  
  X_test = read_idx("t10k-images-idx3-ubyte.gz")
  Y_test = read_idx("t10k-labels-idx1-ubyte.gz")

def indicator(x):
  v = np.zeros(x.shape)
  for i, el in enumerate(x):
    if el >= 0:
      v[i] = 1
    else:
      v[i] = 0
  return v

def training(eta, n, epsilon, X, Y):
  eta = eta
  n = n
  epsilon = epsilon
  np.random.seed(29)
  W = np.random.random((10, 784))
  epoch = 0
  errors = [0]
  flag = 0
  start_time = time.time()

  while flag == 0:
      for i in range(n):
        x = np.reshape(X[i], (784, 1))
        v = W @ x
        j = np.argmax(v)
        if j != Y[i]:
          errors[epoch] += 1

      if errors[epoch]/n < epsilon:
        flag = 1
      else:
        errors.append(0)
        epoch += 1

      if (time.time() - start_time > 150):
        flag = 1

      for i in range(n):
        d_i = np.zeros((10, 1))
        d_i[Y[i]] = 1
        x = np.reshape(X[i], (784, 1))
        v = W @ x
        W = W + eta*(d_i - indicator(v)) @ np.reshape(X[i], (1, 784))
  

  return W, errors

def test(W, X_test, Y_test):
  error = 0
  for i in range(10000):
    x_i_prime = np.reshape(X_test[i], (784, 1))
    v_prime = np.dot(W, x_i_prime)
    maxElement = np.argmax(v_prime)
    j = np.where(v_prime == np.amax(v_prime))
    if j[0] != Y_test[i]:
      error += 1
  return error/10000*100

n = 100
eta = 1
epsilon = 1e-5
W, errors = training(eta, n, epsilon, X, Y)
percentage_error = test(W, X_test, Y_test)

plt.plot( errors, '-b')
plt.title('PTA with n = 50 eta = 1 epsilon = 0')
plt.xlabel('# Epochs')
plt.ylabel('# Errors')
plt.savefig('PTA_n_50_eta_1_epsilon_0.eps', format='eps')

n = 1000
eta = 1
epsilon = 1e-5
W, errors = training(eta, n, epsilon, X, Y)
percentage_error = test(W, X_test, Y_test)

plt.plot( errors, '-b')
plt.title('PTA with n = 1000 eta = 1 epsilon = 0')
plt.xlabel('# Epochs')
plt.ylabel('# Errors')
plt.savefig('PTA_n_1000_eta_1_epsilon_0.eps', format='eps')

n = 60000
eta = 1
epsilon = 0
W, errors = training(eta, n, epsilon, X, Y)
percentage_error = test(W, X_test, Y_test)

plt.plot( errors, '-b')
plt.title('PTA with n = 60000 eta = 1 epsilon = 0')
plt.xlabel('# Epochs')
plt.ylabel('# Errors')
plt.savefig('PTA_n_60000_eta_1_epsilon_0.eps', format='eps')

n = 60000
eta = 1
epsilon = 0.15
W, errors = training(eta, n, epsilon, X, Y)
percentage_error = test(W, X_test, Y_test)

plt.plot( errors, '-b')
plt.title('PTA with n = 60000 eta = 1 epsilon = 0.15')
plt.xlabel('# Epochs')
plt.ylabel('# Errors')
plt.savefig('PTA_n_60000_eta_1_epsilon_0.15_3.eps', format='eps')