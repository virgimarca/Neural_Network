# -*- coding: utf-8 -*-
"""04-664215958-Marcante.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tVfO5Ex2G5rFRyYUpdMRvINOk_OkVXRa
"""

import matplotlib.pyplot as plt
import numpy as np

def training(x, d, W_1, W_2, eta, max_epoch):
  MSE = []
  lr = []
  n_epoch = 0
  while(n_epoch <= max_epoch):
      output = []
      for i in range(n):
          
          v_1 = W_1 @ np.vstack((1, x[i]))
          y_1 = np.tanh(v_1)
          v_2 = W_2 @ np.vstack((1, y_1))
          y_2 = v_2
          output.append(y_2)
          delta_2 = d[i] - y_2
          delta_1 = np.multiply((np.transpose(W_2) @ delta_2)[1:,:], 1 - np.tanh(v_1)**2)
          W_1 += (eta * (delta_1 @ np.vstack((1, x[i])).transpose()))
          W_2 += (eta * (delta_2 @ np.vstack((1, y_1)).transpose()))
      

      sum = 0 
      for i in range(n):
          sum += ((d[i] - output[i])**2)
      mse = (sum / (n))
      
      MSE.append(mse[0,0])
      lr.append(eta)

      if n_epoch > 0:
          if MSE[n_epoch] > MSE[n_epoch - 1]:
              eta = eta * 0.9
          if MSE[n_epoch]  < 0.01:
              break
      
      n_epoch+=1
  return MSE, lr, W_1, W_2, n_epoch

def _forward(x, W_1, W_2):
  v_1 = W_1 @ np.vstack((1, x))
  y_1 = np.tanh(v_1)
  v_2 = W_2 @ np.vstack((1, y_1))
  y_2 = v_2
  return float(y_2)

def forward(x, W_1, W_2):
  if type(x) == float or type(x) == int:
    return _forward(x, W_1, W_2)
  else:
    res = []
    for y_0 in x:
      a = _forward(y_0, W_1, W_2)
      res.append(a)
    return np.array(res)

np.random.seed(7)
n = 300
x = np.random.uniform(0,1,n)
v = np.random.uniform(-0.1, 0.1, n)
d = np.sin(20*x) + (3*x) + v

N = 24
W_1 = np.random.randn(N, 2)
W_2 = np.random.randn(1, N + 1)
eta = 0.01
max_epoch = 10000
MSE, lr, W_1, W_2, n_epochs = training(x, d, W_1, W_2, eta, max_epoch)

plt.scatter(x, d)
plt.xlabel('x')
plt.ylabel('y')
plt.savefig('scatter.eps', format='eps')

plt.plot(MSE)
plt.xlabel('# Epochs')
plt.ylabel('Mean Squared Error')
plt.savefig('MSE.eps', format='eps')

plt.plot(lr)
plt.xlabel('# Epochs')
plt.ylabel('value of eta')
plt.savefig('learning_rate.eps', format='eps')

x_test = np.linspace(0, 1, 30)
y_test = forward(x_test, W_1, W_2) 

plt.figure(figsize=(4, 3))
ax = plt.axes()
ax.scatter(x, d, label = 'points used in training')
ax.plot(x_test, y_test, 'r-', label = 'interpolating line')
ax.set_xlabel('x')
ax.set_ylabel('y')
lgd = ax.legend(loc = 'upper center', bbox_to_anchor = (0.5, -0.15), ncol = 2, fancybox = True)
plt.savefig('interpolation.eps', format='eps', bbox_extra_artists = (lgd,), bbox_inches = 'tight') 
plt.show()