# -*- coding: utf-8 -*-
"""0603-664215958-Marcante.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fdVnEgcKsGfBsxJ9gXkf7bKGVL1w9GgT
"""

import os
import torch
import torchvision
import torchvision.transforms as transforms
import torch.nn as nn
import torch.nn.functional as F
from PIL import Image
from torchvision.datasets import ImageFolder

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, 5)
        self.pool1 = nn.MaxPool2d(4, 4)
        self.conv2 = nn.Conv2d(64, 32, 5)
        self.pool2 = nn.MaxPool2d(5, 5)
        self.conv3 = nn.Conv2d(32, 16, 5)
        self.pool3 = nn.MaxPool2d(5, 5)
        self.fc1 = nn.Linear(16, 200)
        self.fc2 = nn.Linear(200, 64)
        self.fc3 = nn.Linear(64, 9)
        
    def forward(self, x):
        x = self.conv1(x)
        x = F.relu(x)
        x = self.pool1(x)
        x = self.conv2(x)
        x = F.relu(x)
        x = self.pool2(x)
        x = self.conv3(x)
        x = F.relu(x)
        x = self.pool3(x)
        x = torch.flatten(x, 1)
        x = self.fc1(x)
        x = F.relu(x)
        x = self.fc2(x)
        x = F.relu(x)
        x = self.fc3(x)
        return x

is_cuda = False
if torch.cuda.is_available():
    is_cuda = True

path = './' # path of the validation images / current directory

filename = []
images = []
simple_transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.1307,), (0.3081,))
        ])

for i in os.listdir(path):  
    if os.path.splitext(i)[-1] == '.png':
      filename.append(i)
      images.append(Image.open(os.path.join(path, i)))
images = list(map(lambda i: simple_transform(i).unsqueeze(0),images))


model = Net()
model.load_state_dict(torch.load('./0502-664215958-Marcante.ZZZ', map_location=torch.device('cpu')), strict=True) # directory where model is stored
labels = ['Circle','Heptagon','Hexagon','Nonagon','Octagon','Pentagon','Square','Star','Triangle']
model.eval()
predictions = list(zip(filename, list(map(lambda k: labels[k], list(map(lambda l: model(l).argmax().item(), images))))))
textfile = open('data.txt', 'w')

for prediction in predictions:
    print(f'{prediction[0]}: {prediction[1]}')
    textfile.write(f'{prediction[0]}: {prediction[1]}')
    textfile.write('\n')
textfile.close()